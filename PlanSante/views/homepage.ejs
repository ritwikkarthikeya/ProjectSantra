<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard | Diet Plan</title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
      .navbar {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: black;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        font-family: Arial, Helvetica, sans-serif;
        height: 20%;
        position: relative;
      }
      .navbar-brand {
        display: flex;
        margin-right: 47%;
        color: #17bbef;
      }
      .navbar-menu {
        display: flex;
        gap: 30px;
      }
      #myPlanButton {
        outline: 0;
        display: inline-flex;
        align-items: center;
        justify-content: space-between;
        background: #17bbef;
        min-width: 100px;
        border: 0;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
        padding: 16px 20px;
        color: #fff;
        font-size: 12px;
        font-weight: 600;
        letter-spacing: 1.2px;
        text-transform: uppercase;
        overflow: hidden;
        cursor: pointer;
      }
      #myPlanButton:hover {
        opacity: 0.95;
      }

      #myPlanButton .animation {
        border-radius: 100%;
        animation: ripple 0.6s linear infinite;
      }

      @keyframes ripple {
        0% {
          box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1),
            0 0 0 20px rgba(255, 255, 255, 0.1),
            0 0 0 40px rgba(255, 255, 255, 0.1),
            0 0 0 60px rgba(255, 255, 255, 0.1);
        }

        100% {
          box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.1),
            0 0 0 40px rgba(255, 255, 255, 0.1),
            0 0 0 60px rgba(255, 255, 255, 0.1),
            0 0 0 80px rgba(255, 255, 255, 0);
        }
      }
      .logout-btn {
        outline: 0;
        display: inline-flex;
        align-items: center;
        justify-content: space-between;
        background: #e20808;
        min-width: 100px;
        border: 0;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
        padding: 16px 20px;
        color: #fff;
        font-size: 12px;
        font-weight: 600;
        letter-spacing: 1.2px;
        text-transform: uppercase;
        overflow: hidden;
        cursor: pointer;
      }
      .logout-btn:hover {
        opacity: 0.95;
      }

      .logout-btn .animation {
        border-radius: 100%;
        animation: ripple 0.6s linear infinite;
      }

      @keyframes ripple {
        0% {
          box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1),
            0 0 0 20px rgba(255, 255, 255, 0.1),
            0 0 0 40px rgba(255, 255, 255, 0.1),
            0 0 0 60px rgba(255, 255, 255, 0.1);
        }

        100% {
          box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.1),
            0 0 0 40px rgba(255, 255, 255, 0.1),
            0 0 0 60px rgba(255, 255, 255, 0.1),
            0 0 0 80px rgba(255, 255, 255, 0);
        }
      }

      .search-container {
        position: absolute;
        top: 98%;
        left: 0;
        right: 0;
        border-top-left-radius: 0px;
        border-top-right-radius: 0px;
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
        background-color: #000000;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 15px;
        display: none; /* Initially hidden */
        z-index: 10;
        border: 1px solid #000000;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .search-bar {
        width: 80%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        outline: none;
      }

      .close-btn {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        margin-left: 10px;
        color: #555;
      }

      .close-btn:hover {
        color: red;
      }
      .popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .popup-content {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        width: 80%;
        max-width: 500px;
        text-align: center;
      }

      #searchResults {
        width: 80%;
        margin: 15px auto 0;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        color: #333;
        font-family: Arial, sans-serif;
        font-size: 14px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      #searchResults ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      #searchResults li {
        padding: 8px 10px;
        border-bottom: 1px solid #ddd;
      }

      #searchResults li:last-child {
        border-bottom: none;
      }

      #searchResults li:hover {
        background-color: #e9ecef;
        cursor: pointer;
      }

      /* Button for search */
      #searchButton {
        outline: 0;
        background: #17bbef;
        border: 0;
        border-radius: 4px;
        color: #fff;
        font-size: 12px;
        font-weight: 600;
        letter-spacing: 1.2px;
        text-transform: uppercase;
        padding: 8px 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-left: 10px;
      }

      #searchButton:hover {
        background-color: #15a7d3;
      }

      /* Input for username search */
      #searchInput {
        width: 70%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 5px;
        outline: none;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      #searchInput:focus {
        border-color: #17bbef;
        box-shadow: 0 0 5px rgba(23, 187, 239, 0.5);
      }

      /* Center alignment for search bar and results */
      #searchContainer {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        margin-top: 10px;
        background-color: #000000;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      /* Highlight when no results are found */
      #searchResults:empty {
        display: flex;
        justify-content: center;
        align-items: center;
        color: #999;
        font-size: 16px;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <nav>
      <div class="navbar">
        <div class="navbar-brand">
          <h1>Welcome, <%= user.username %>!</h1>
        </div>
        <div class="navbar-menu">
          <button class="btn search-toggle" id="searchToggleButton">
            <i class="animation"></i>Search<i class="animation"></i>
          </button>
          <div class="search-container">
            <form id="searchForm" method="GET" action="/search">
              <input
                type="text"
                name="username"
                id="searchBar"
                class="search-bar"
                placeholder="Search users by username..."
                required
              />
              <button type="submit" id="searchButton" class="btn">
                Search
              </button>
            </form>
          </div>
          <div id="searchResults" style="margin-top: 20px; display: none">
            <h3>Search Results:</h3>
            <ul id="resultsList"></ul>
          </div>

          <button class="btn" id="myPlanButton">
            <i class="animation"></i>MY PLAN<i class="animation"></i>
          </button>
          <a href="/logout">
            <button class="logout-btn">
              <i class="animation"></i>Logout<i class="animation"></i>
            </button>
          </a>
        </div>
      </div>
    </nav>
    <div id="popup" class="popup" style="display: none">
      <div class="popup-content">
        <!-- Day Selection -->
        <section class="day-selection">
          <h3>Select the day you're on (1-30):</h3>
          <input
            type="number"
            id="dayInput"
            min="1"
            max="30"
            placeholder="Enter day number"
          />
          <button id="fetchDayPlanButton">Get Diet Plan</button>
        </section>

        <!-- Diet Plan Result -->
        <section id="dietPlanResult" style="display: none">
          <h3>Diet Plan for Day <span id="dayNumber"></span></h3>
          <form id="dietPlanForm">
            <div id="dietPlanCheckboxes">
              <!-- Checkbox list will be dynamically populated -->
            </div>
            <div class="additional-food">
              <label for="additionalFood"
                >Add a food item you consumed (not in the plan):</label
              >
              <input
                type="text"
                id="additionalFood"
                name="additionalFood"
                placeholder="E.g., Pizza, Ice Cream"
              />
            </div>
            <button type="button" id="submitPlan">Update Diet Plan</button>
          </form>
        </section>
      </div>
    </div>

    <!-- Main Content -->
    <main>
      <!-- Day Selection -->
      <section id="wholeResult" style="display: none">
        <h3>die for 30 days:</h3>
      </section>
    </main>

    <!-- Scripts -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const searchToggleButton =
          document.getElementById("searchToggleButton");
        const searchContainer = document.getElementById("searchContainer");
        const dietPlanContainer = document.getElementById("wholeResult");
        const myPlanButton = document.getElementById("myPlanButton");
        const fetchDayPlanButton =
          document.getElementById("fetchDayPlanButton");
        const submitPlanButton = document.getElementById("submitPlan");
        const popup = document.getElementById("popup");
        const dayInput = document.getElementById("dayInput");
        const dietPlanResult = document.getElementById("dietPlanResult");
        const dietPlanCheckboxes =
          document.getElementById("dietPlanCheckboxes");
        const searchInput = document.getElementById("searchInput");
        const searchButton = document.getElementById("searchButton");
        const searchResultsContainer = document.getElementById("searchResults");

        // Search Toggle
        if (searchToggleButton && searchContainer) {
          searchToggleButton.addEventListener("click", () => {
            searchContainer.style.display =
              searchContainer.style.display === "flex" ? "none" : "flex";
          });
        }

        // My Plan Button
        if (myPlanButton && dietPlanContainer) {
          myPlanButton.addEventListener("click", async () => {
            if (dietPlanContainer.style.display === "block") {
              dietPlanContainer.style.display = "none";
              dietPlanContainer.innerHTML = "";
            } else {
              try {
                const response = await fetch("/my-plan/all");
                const data = await response.json();

                if (data.success) {
                  dietPlanContainer.innerHTML = ""; // Clear existing content
                  data.plan.forEach((dayPlan, index) => {
                    const dayHeader = document.createElement("h3");
                    dayHeader.textContent = `Day ${index + 1}`;

                    const dayList = document.createElement("ul");
                    dayPlan.meals.forEach((meal) => {
                      const listItem = document.createElement("li");
                      listItem.innerHTML = `
                                                  <strong>${meal.Food}</strong> 
                                                  (Calories: ${meal.Calories}, Proteins: ${meal.Proteins}g, Carbs: ${meal.Carbs}g, Fats: ${meal.Fats}g)
                                              `;
                      dayList.appendChild(listItem);
                    });

                    dietPlanContainer.appendChild(dayHeader);
                    dietPlanContainer.appendChild(dayList);
                  });

                  dietPlanContainer.style.display = "block"; // Show the container
                } else {
                  alert(
                    data.message || "Failed to fetch the complete diet plan."
                  );
                }
              } catch (error) {
                console.error("Error fetching diet plan:", error);
                alert("An error occurred while fetching the diet plan.");
              }
            }
          });
        }

        // Fetch Day Plan
        if (fetchDayPlanButton) {
          fetchDayPlanButton.addEventListener("click", async () => {
            const day = document.getElementById("dayInput").value;
            if (!day || day < 1 || day > 30) {
              alert("Please enter a valid day number between 1 and 30.");
              return;
            }

            try {
              const response = await fetch(`/my-plan/day/${day}`);
              const data = await response.json();

              if (data.success) {
                dietPlanCheckboxes.innerHTML = "";
                document.getElementById("dayNumber").textContent = day;

                const fragment = document.createDocumentFragment();
                data.plan.forEach((item) => {
                  const div = document.createElement("div");
                  div.classList.add("food-item");
                  div.innerHTML = `
                                          <input type="checkbox" name="selectedFoods" value='${JSON.stringify(
                                            item
                                          )}' id="food-${item.Food}" checked>
                                          <label for="food-${item.Food}">
                                              <strong>${item.Food}</strong> 
                                              (Calories: ${
                                                item.Calories
                                              }, Proteins: ${
                    item.Proteins
                  }g, Carbs: ${item.Carbs}g, Fats: ${item.Fats}g)
                                          </label>
                                      `;
                  fragment.appendChild(div);
                });
                dietPlanCheckboxes.appendChild(fragment);
                dietPlanResult.style.display = "block";
              } else {
                alert(data.message || "Failed to fetch the diet plan.");
              }
            } catch (error) {
              console.error("Error fetching diet plan:", error);
              alert("An error occurred while fetching the diet plan.");
            }
          });
        }

        // Submit Updated Plan
        if (submitPlanButton) {
          submitPlanButton.addEventListener("click", async () => {
            const day = document.getElementById("dayInput").value;
            const selectedFoods = Array.from(
              document.querySelectorAll('input[name="selectedFoods"]:checked')
            ).map((checkbox) => JSON.parse(checkbox.value));
            const additionalFood = document
              .getElementById("additionalFood")
              .value.trim();

            try {
              const response = await fetch(`/diet-plan/adjust/${day}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ selectedFoods, additionalFood }),
              });
              const result = await response.json();

              if (result.success) {
                alert("Diet plan updated successfully!");
                // Close the popup after updating
                popup.style.display = "none";
              } else {
                alert(result.message || "Failed to update the diet plan.");
              }
            } catch (error) {
              console.error("Error updating diet plan:", error);
              alert("An error occurred while updating the diet plan.");
            }
          });
        }

        // Dynamic Username Search
        if (searchButton && searchInput && searchResultsContainer) {
          searchButton.addEventListener("click", async (event) => {
            event.preventDefault();

            const query = searchInput.value.trim();

            // Debugging logs to confirm input and button click
            console.log("Search button clicked");
            console.log("Search query:", query);

            if (!query) {
              alert("Please enter a username to search.");
              return;
            }

            // Add a loading indicator
            searchResultsContainer.textContent = "Searching...";

            try {
              const response = await fetch(
                `/search?username=${encodeURIComponent(query)}`
              );
              if (!response.ok) {
                throw new Error(`Server returned status: ${response.status}`);
              }

              const data = await response.json();
              searchResultsContainer.innerHTML = ""; // Clear previous results

              if (data.success && data.users && data.users.length > 0) {
                const resultsList = document.createElement("ul");
                data.users.forEach((user) => {
                  const listItem = document.createElement("li");
                  listItem.textContent = user.username; // Assuming user has `username` property
                  resultsList.appendChild(listItem);
                });
                searchResultsContainer.appendChild(resultsList);
              } else {
                searchResultsContainer.textContent =
                  "No users found with that username.";
              }
            } catch (error) {
              console.error("Error fetching users:", error);
              alert(
                "An error occurred while searching for users. Please try again."
              );
              searchResultsContainer.textContent =
                "Error occurred. Try again later.";
            }
          });
        }

        // Show Popup on Homepage Load
        popup.style.display = "flex";
      });
    </script>
  </body>
</html>
