<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard | Diet Plan</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        .navbar{
            display:flex;
            align-items: center;
            justify-content: center;
            background-color: black;
            border-top-left-radius: 20px;
            border-top-right-radius: 20px;
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
            font-family: Arial, Helvetica, sans-serif;
            height: 20%;
            position: relative;
            
        }
        .navbar-brand{
            display: flex;
           margin-right:47% ;
           color: #17BBEF;
           
        }
        .navbar-menu{
            display: flex;
            gap: 30px;
        }
        #myPlanButton{
            outline: 0;
            display: inline-flex;
            align-items: center;
            justify-content: space-between;
            background: #17BBEF;
            min-width: 100px;
            border: 0;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, .1);
            box-sizing: border-box;
            padding: 16px 20px;
            color: #fff;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 1.2px;
            text-transform: uppercase;
            overflow: hidden;
            cursor: pointer;
        }
        #myPlanButton:hover {
            opacity: .95;
           }

   #myPlanButton .animation {
     border-radius: 100%;
     animation: ripple 0.6s linear infinite;
   }
   
   @keyframes ripple {
     0% {
       box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1), 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1);
     }
   
     100% {
       box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1), 0 0 0 80px rgba(255, 255, 255, 0);
     }
   }
   .logout-btn{
            outline: 0;
            display: inline-flex;
            align-items: center;
            justify-content: space-between;
            background: #e20808;
            min-width: 100px;
            border: 0;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, .1);
            box-sizing: border-box;
            padding: 16px 20px;
            color: #fff;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 1.2px;
            text-transform: uppercase;
            overflow: hidden;
            cursor: pointer;
        }
        .logout-btn:hover {
            opacity: .95;
           }

  .logout-btn .animation {
     border-radius: 100%;
     animation: ripple 0.6s linear infinite;
   }
   
   @keyframes ripple {
     0% {
       box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1), 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1);
     }
   
     100% {
       box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1), 0 0 0 80px rgba(255, 255, 255, 0);
     }
   }

   .search-container {
    position: absolute;
    top: 98%;
    left: 0;
    right: 0;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    border-bottom-left-radius: 20px;
    border-bottom-right-radius: 20px;
    background-color: #000000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 15px;
    display: none; /* Initially hidden */
    z-index: 10;
    border: 1px solid #000000;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.search-bar {
    width: 80%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
    outline: none;
}

.close-btn {
    background: none;
    border: none;
    font-size: 18px;
    cursor: pointer;
    margin-left: 10px;
    color: #555;
}

.close-btn:hover {
    color: red;
}
    </style>

</head>
<body>
    <!-- Navbar -->
    <nav>

        <div class="navbar">
            <div class="navbar-brand">
                <h1>Welcome, <%= user.username %>!</h1>
            </div>
            <div class="navbar-menu">
                <button class="btn search-toggle" id="searchToggleButton">
                    <i class="animation"></i>Search<i class="animation"></i>
                </button>
                <div class="search-container" id="searchContainer">
                    <input type="text" placeholder="Find what you seek..." class="search-bar">
                  
                </div>
                <button class="btn" id="myPlanButton">
                    <i class="animation"></i>MY PLAN<i class="animation"></i>
                </button>
                <a href="/logout">
                    <button class="logout-btn">
                        <i class="animation"></i>Logout<i class="animation"></i>
                    </button>
                </a>
            </div>
        </div>
        
        
    </nav>

    <!-- Main Content -->
    <main>
        <!-- Day Selection -->
        <section class="day-selection">
            <h3>Select the day you're on (1-30):</h3>
            <input type="number" id="dayInput" min="1" max="30" placeholder="Enter day number">
            <button id="fetchDayPlanButton">Get Diet Plan</button>
        </section>

        <!-- Diet Plan Result -->
        <section id="dietPlanResult" style="display: none;">
            <h3>Diet Plan for Day <span id="dayNumber"></span></h3>
            <form id="dietPlanForm">
                <div id="dietPlanCheckboxes">
                    <!-- Checkbox list will be dynamically populated -->
                </div>

                <!-- Additional Food Input -->
                <div class="additional-food">
                    <label for="additionalFood">Add a food item you consumed (not in the plan):</label>
                    <input 
                        type="text" 
                        id="additionalFood" 
                        name="additionalFood" 
                        placeholder="E.g., Pizza, Ice Cream">
                </div>

                <button type="button" id="submitPlan">Update Diet Plan</button>
            </form>
        </section>
    </main>

    <!-- Scripts -->
    <script>
// Get DOM elements
const searchToggleButton = document.getElementById('searchToggleButton');
const searchContainer = document.getElementById('searchContainer');
const closeSearchButton = document.getElementById('closeSearchButton');

const dietPlanContainer = document.getElementById('dietPlanResult');
// Toggle the search bar dropdown
searchToggleButton.addEventListener('click', () => {
    if (searchContainer.style.display === 'flex') {
        searchContainer.style.display = 'none'; // Hide if already visible
    } else {
        searchContainer.style.display = 'flex'; // Show if hidden
    }
});



myPlanButton.addEventListener('click', async () => {
    // Toggle visibility
    if (dietPlanContainer.style.display === 'block') {
        dietPlanContainer.style.display = 'none'; // Hide if already visible
        dietPlanContainer.innerHTML = ''; // Optional: Clear previous content
    } else {
        try {
            const response = await fetch('/my-plan/all');
            const data = await response.json();

            if (data.success) {
                dietPlanContainer.innerHTML = ''; // Clear previous content

                data.plan.forEach((dayPlan, index) => {
                    const dayHeader = document.createElement('h3');
                    dayHeader.textContent = `Day ${index + 1}`;

                    const dayList = document.createElement('ul');
                    dayPlan.meals.forEach((meal) => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            <strong>${meal.Food}</strong> 
                            (Calories: ${meal.Calories}, Proteins: ${meal.Proteins}g, Carbs: ${meal.Carbs}g, Fats: ${meal.Fats}g)
                        `;
                        dayList.appendChild(listItem);
                    });

                    dietPlanContainer.appendChild(dayHeader);
                    dietPlanContainer.appendChild(dayList);
                });

                dietPlanContainer.style.display = 'block'; // Show the container
            } else {
                alert(data.message || 'Failed to fetch the complete diet plan.');
            }
        } catch (error) {
            console.error('Error fetching complete diet plan:', error);
            alert('An error occurred while fetching the complete diet plan.');
        }
    }
});
 document.getElementById('fetchDayPlanButton').addEventListener('click', async () => {
    const day = document.getElementById('dayInput').value;

    // Validate day input
    if (!day || day < 1 || day > 30) {
        alert('Please enter a valid day number between 1 and 30.');
        return;
    }

    try {
        const response = await fetch(`/my-plan/day/${day}`);
        const data = await response.json();

        if (data.success) {
            // Populate Diet Plan Checkboxes
            const dietPlanCheckboxes = document.getElementById('dietPlanCheckboxes');
            dietPlanCheckboxes.innerHTML = ''; // Clear previous content
            document.getElementById('dayNumber').textContent = day;

            data.plan.forEach(item => {
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = 'selectedFoods';
                checkbox.value = JSON.stringify(item);
                checkbox.id = `food-${item.Food}`;
                checkbox.checked = true;

                const label = document.createElement('label');
                label.htmlFor = `food-${item.Food}`;
                label.innerHTML = `
                    <strong>${item.Food}</strong> 
                    (Calories: ${item.Calories}, Proteins: ${item.Proteins}g, Carbs: ${item.Carbs}g, Fats: ${item.Fats}g)
                `;

                const div = document.createElement('div');
                div.classList.add('food-item');
                div.appendChild(checkbox);
                div.appendChild(label);

                dietPlanCheckboxes.appendChild(div);
            });

            // Show the Diet Plan Section
            document.getElementById('dietPlanResult').style.display = 'block';
        } else {
            alert(data.message || 'Failed to fetch the diet plan.');
        }
    } catch (error) {
        console.error('Error fetching diet plan:', error);
        alert('An error occurred while fetching the diet plan.');
    }
});

// Submit Updated Diet Plan
document.getElementById('submitPlan').addEventListener('click', async () => {
    const day = document.getElementById('dayInput').value;

    // Get selected foods (checked items)
    const selectedFoods = Array.from(document.querySelectorAll('input[name="selectedFoods"]:checked'))
        .map(checkbox => JSON.parse(checkbox.value));

    // Get additional food input
    const additionalFood = document.getElementById('additionalFood').value.trim();

    try {
        const response = await fetch(`/diet-plan/adjust/${day}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ selectedFoods, additionalFood }),
        });
        const result = await response.json();

        if (result.success) {
            alert('Diet plan updated successfully!');
            console.log('Updated Diet Plan:', result.updatedPlan);
        } else {
            alert(result.message || 'Failed to update the diet plan.');
        }
    } catch (error) {
        console.error('Error updating diet plan:', error);
        alert('An error occurred while updating the diet plan.');
    }
});

// Adjust diet plan if additional food is provided
function adjustDietPlan(data, dietPlan, eatenFood) {
    const updatedDietPlan = [];

    // Loop through all the days in the diet plan
    for (let day of dietPlan) {
        const updatedDay = [];
        let foodReplaced = false;

        // Loop through each meal of the day
        for (let meal of day) {
            // Check if the meal is the one that was eaten and needs to be replaced
            if (meal.Food === eatenFood && !foodReplaced) {
                // Replace the eaten food with a random food from the provided data
                const substitute = data[Math.floor(Math.random() * data.length)];
                updatedDay.push({
                    Food: substitute.food_name,
                    Calories: substitute.energy_kcal,
                    Proteins: substitute.protein_g,
                    Carbs: substitute.carb_g,
                    Fats: substitute.fat_g,
                });
                foodReplaced = true; // Ensure only one replacement per day
            } else {
                // Keep the meal if it wasn't eaten
                updatedDay.push(meal);
            }
        }

        updatedDietPlan.push(updatedDay);
    }

    return updatedDietPlan;
}

    </script>
</body>
</html>
